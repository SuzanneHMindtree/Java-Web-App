// (ATB)
plugins {
    id "fr.putnami.gwt" version "0.4.0"
    id 'info.solidsoft.pitest' version '1.3.0'
    id 'checkstyle'
    id 'findbugs'
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'


//Java version compatibility to use when compiling Java source.
sourceCompatibility = 1.8
//Java version to generate classes for.
targetCompatibility = 1.8
//Script Version
version = '1.0'


tasks.withType(Checkstyle) {
 ignoreFailures = true
 reports {
 html.enabled = true
 }
}

findbugs {
  ignoreFailures = true
  toolVersion = "3.0.1"
  sourceSets=[sourceSets.main]
  //excludeFilter = file("config/findbugs/excludeFilter.xml")
  includeFilter=file("config/findbugs/includeFilter.xml")
  reportsDir = file("$project.buildDir/reports/findbugs")
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled true
        html.enabled false
    }
}




repositories {
	mavenCentral()
}

dependencies {
 	testCompile 'junit:junit:4.12'
 	testCompile 'org.easymock:easymock:2.5.2'
	testCompile 'com.google.gwt:gwt-dev:2.8.1'
    testCompile 'mysql:mysql-connector-java:8.0.13'


    // For Cucumber / Selenium
    compile group: 'info.cukes', name: 'cucumber-core', version: '1.2.5'
    compile group: 'info.cukes', name: 'cucumber-html', version: '0.2.6'
    compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
    compile group: 'info.cukes', name: 'cucumber-jvm-deps', version: '1.0.5'
    compile group: 'info.cukes', name: 'gherkin', version: '2.12.2'
    compile group: 'info.cukes', name: 'gherkin-jvm-deps', version: '1.0.3'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.8.1'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '3.8.1'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

}

pitest{
  targetClasses = ['pt.isep.cms.students.*']
  timestampedReports = false
}

task renderPlantUml(type: RenderPlantUmlTask) {
}

javadoc {
    options.addStringOption("sourcepath", "${projectDir}/src/main/java")
    source = sourceSets.main.allJava
    options.overview = "src/main/javadoc/overview.html" // relative to source root
}

// If we woant to use the default ant build inside gradle
// ant.importBuild "build.xml"

putnami{

	module 'pt.isep.cms.Showcase'
	//module 'com.google.gwt.sample.contacts.Contacts'

	/** add gwt nature on eclipse project. require apply plugin: 'eclipse' to work. default : false*/
	googlePluginEclipse = true

	gwtVersion='2.8.1'

	compile {
		sourceLevel = '1.8'
	}

	jetty {
        /** enable debugging. */
        debugJava = true
        /** debug port to listen. */
        debugPort = 8000
        /** wait for debugger attachment. */
        debugSuspend = false
    }
}

// Jacoco
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

// This task generates the coverage report for the integration tests.
// Notice that it only includes data about the server code sice Jaccoco is not able to get data about cliente code that is transpiled to javascript

task jacocoIntegrationReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main

    executionData = files("${buildDir}/jacoco/integrationTest.exec")

    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

task jacocoUnitTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main

    executionData = files("${buildDir}/jacoco/test.exec")

    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

// Integration Tests
task integrationTest(type: Test) {
	filter {
		//all GWT unit tests, by naming convention
      	includeTestsMatching "*StudentGWTTest*"
	}
    jacoco {
    		append = true
    		enabled = true
    		//classDumpFile = file("${buildDir}/jacoco/classpathdumps")

    		excludes = ["com/steadystate/**"]

    }
    // These Properties are required to run gwt integration tests
    systemProperties['gwt.args'] = "-devMode -logLevel WARN -war www-test"
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// Unit Tests
test {
	filter {
		//all JRE unit tests, by naming convention
      	includeTestsMatching "*JRETest*"
        //
	}
    jacoco {
    		append = true
    		enabled = true
  		//classDumpFile = file("${buildDir}/jacoco/classpathdumps")
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

task selenium() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.selenium', 'src/test/java/features']
            systemProperties = ['Headless': 'true' ]
        }
    }
}

task seleniumTest(type: Test) {
    filter {
        //include all tests from package
        includeTestsMatching "selenium.*"
    }
}